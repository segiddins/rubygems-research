apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  labels:
    app: rubygems-research
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  selector:
    matchLabels:
      app: rubygems-research
  template:
    metadata:
      annotations:
        admission.datadoghq.com/ruby-lib.version: v1.23.0
        ad.datadoghq.com/rubygems-research.logs: '[{"source":"rails","service":"rubygems-research","env":"production"}]'
      labels:
        name: app
        app: rubygems-research
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: rubygems-research
        tags.datadoghq.com/source: rails
        admission.datadoghq.com/enabled: "true"
    spec:
      containers:
        - name: rubygems-research
          image: ghcr.io/segiddins/rubygems-research:main
          imagePullPolicy: Always
          command:
            ["bin/puma", "--environment", "production", "-C", "config/puma.rb"]
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: RAILS_ENV
              value: production
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: RAILS_MAX_THREADS
              value: "5"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
                  apiVersion: v1
            - name: STATSD_IMPLEMENTATION
              value: datadog
            - name: DATABASE_URL
              value: postgresql://postgres:iZLNkfG3P1@rubygems-research-db-postgresql.rubygems-research-production.svc.cluster.local:5432/rubygems_research_production
            - name: DUMP_DATABASE_URL
              value: postgresql://postgres:8GUkAIeDm2@rubygems-db-postgresql.rubygems-research-production.svc.cluster.local:5432/rubygems_production
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: app
                  key: SECRET_KEY_BASE
            - name: RUBYGEMS_HASHED_API_KEY
              valueFrom:
                secretKeyRef:
                  name: app
                  key: rubygems-hashed-api-key
            - name: PORT
              value: "8080"
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            privileged: false
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 25
          resources:
            requests:
              memory: "1Gi"
              cpu: "1"
            limits:
              memory: "12Gi"
              cpu: "5"
      imagePullSecrets:
        - name: ghcr
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: app
  labels:
    name: app
  annotations:
    tailscale.com/expose: "true"
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    name: app

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: app
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`research.rubygems.info`) || Host(`rubygems-research-1.folk-dinosaur.ts.net`)
      services:
        - namespace: rubygems-research-production
          name: app
          port: 8080
  tls:
    certResolver: le-prod
    domains:
      - main: "research.rubygems.info"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: load-pg-dump
spec:
  template:
    spec:
      containers:
        - name: load-pg-dump
          image: ubuntu:latest
          command: ["sleep", "10000000"]
          resources:
            limits:
              memory: "2Gi"
              cpu: "1"
            requests:
              memory: "256Mi"
              cpu: "100m"
      restartPolicy: Never

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jobs
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  selector:
    matchLabels:
      name: jobs
  template:
    metadata:
      annotations:
        admission.datadoghq.com/ruby-lib.version: v1.23.0
        ad.datadoghq.com/good-job.logs: '[{"source":"rails","service":"rubygems-research","env":"production"}]'
      labels:
        name: jobs
        app: rubygems-research
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: rubygems-research
        tags.datadoghq.com/source: rails
        admission.datadoghq.com/enabled: "true"
    spec:
      containers:
        - name: good-job
          image: ghcr.io/segiddins/rubygems-research:main
          args: ["bin/good_job", "start"]
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 500m
              memory: 2Gi
            limits:
              cpu: "3.0"
              memory: 64.0Gi
          ports:
            - name: probe-port
              containerPort: 7001
          startupProbe:
            httpGet:
              path: "/status/started"
              port: probe-port
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: "/status/connected"
              port: probe-port
            failureThreshold: 1
            periodSeconds: 10
          env:
            - name: RAILS_ENV
              value: production
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: GOOD_JOB_PROBE_PORT
              value: "7001"
            - name: RAILS_MAX_THREADS
              value: "5"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
                  apiVersion: v1
            - name: STATSD_IMPLEMENTATION
              value: datadog
            - name: DATABASE_URL
              value: postgresql://postgres:iZLNkfG3P1@rubygems-research-db-postgresql.rubygems-research-production.svc.cluster.local:5432/rubygems_research_production
            - name: DUMP_DATABASE_URL
              value: postgresql://postgres:8GUkAIeDm2@rubygems-db-postgresql.rubygems-research-production.svc.cluster.local:5432/rubygems_production
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: app
                  key: SECRET_KEY_BASE
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            privileged: false
